@{
    Layout = "~/Views/Shared/_DashboardLayout.cshtml"; // Adjust the path to your layout file if necessary
}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
@* <link href="~/css/home.css" rel="stylesheet" /> *@
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.5/css/jquery.dataTables.min.css">
<script src="https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js"></script>
<link rel="stylesheet" href="https://cdn.datatables.net/fixedcolumns/4.2.2/css/fixedColumns.dataTables.min.css">
<script src="https://cdn.datatables.net/fixedcolumns/4.2.2/js/dataTables.fixedColumns.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.0/dist/JsBarcode.all.min.js"></script>
<!-- SweetAlert2 -->
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet" href="~/css/site.css" />



<div class="container-fluid" style="max-width: 100%; padding-top: 0; margin-top: 0;">
    <!-- Calendar Section -->
    <div class="row my-3">
        <div class="col-md-12 text-center">
            <h1 style="color: rgba(80,90,201,1);">Malama</h1>
        </div>
    </div>
    <div class="row my-3">
        <div class="col-md-4">
            <label for="calendarInput" style="color: black;">Event Start Date:</label>
            <input type="date" class="form-control" id="calendarInput" />
        </div>
        <div class="col-md-4">
            <label for="lastCalendarInput" style="color: black;">Event End Date:</label>
            <input type="date" class="form-control" id="lastCalendarInput" />
        </div>
    </div>
    <div class="row my-3">
        <div class="col-md-2">
            <label for="eventId" class="form-label" style="color: black;">Event ID</label>
            <input type="text" class="form-control event-input" id="eventId" name="eventId" placeholder="Enter Event ID" required>
        </div>
    </div>

    <!-- Dropdowns Section -->
    <div class="row my-3">
        <div class="col-md-2">
            <label for="dropdownVision" style="color: black;">Previous Dental Exam Window:</label>
            <select class="form-control" id="dropdownLastDentalExam">
                <option value="0" selected>0</option>
                <option value="90">90</option>
                <option value="180">180</option>
                <option value="270">270</option>
                <option value="365">365</option>
                <option value="455">455</option>
            </select>
        </div>
        <div class="col-md-2">
            <label for="dropdownVision" style="color: black;">Vision:</label>
            <select class="form-control" id="dropdownVision">
                <option value="0" selected>0</option>
                <option value="90">90</option>
                <option value="180">180</option>
                <option value="270">270</option>
                <option value="365">365</option>
            </select>
        </div>
        <div class="col-md-2">
            <label for="dropdownDental" style="color: black;">Dental:</label>
            <select class="form-control" id="dropdownDental">
                <option value="0" selected>0</option>
                <option value="90">90</option>
                <option value="180">180</option>
                <option value="270">270</option>
                <option value="365">365</option>
            </select>
        </div>
        <div class="col-md-2">
            <label for="dropdownPHA" style="color: black;">PHA:</label>
            <select class="form-control" id="dropdownPHA">
                <option value="0" selected>0</option>
                <option value="90">90</option>
                <option value="180">180</option>
                <option value="270">270</option>
                <option value="365">365</option>
            </select>
        </div>
        <div class="col-md-2">
            <label for="dropdownHIV" style="color: black;">HIV:</label>
            <select class="form-control" id="dropdownHIV">
                <option value="0" selected>0</option>
                <option value="90">90</option>
                <option value="180">180</option>
                <option value="270">270</option>
                <option value="365">365</option>
            </select>
        </div>
        <div class="col-md-2">
            <label for="dropdownHearing" style="color: black;">Hearing:</label>
            <select class="form-control" id="dropdownHearing">
                <option value="0" selected>0</option>
                <option value="90">90</option>
                <option value="180">180</option>
                <option value="270">270</option>
                <option value="365">365</option>
            </select>
        </div>
    </div>

    <form id="fileUploadForm" enctype="multipart/form-data">
        <input type="file" id="fileInput" name="files" multiple accept=".xls,.xlsx" style="display: none;">
        <div class="d-flex justify-content-center my-3">
            <button type="button" class="btn btn-primary" id="uploadButton">Upload and Preview</button>
        </div>
        <div class="d-flex justify-content-center my-3">
            <button type="button" class="btn btn-primary" onclick="clearPreview()" id="clearPreview">Clear Preview</button>
        </div>
    </form>

    <div id="loader" class="d-none loader-container">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>

    <div id="parentContainer">
        <div id="taskforceInfoContainer" style="font-weight: bold; margin-bottom: 20px;">
        </div>
        <div id="fileValidationErrorContainer" style="font-weight: bold; margin-top: 10px;">
        </div>
    </div>

    @await Html.PartialAsync("_PreviewTable")


    <div class="d-flex justify-content-center my-3 button-container">
        <button id="addRowButton" class="btn btn-secondary d-none">Add Walk-In Service Member</button>
        <button id="generateExcelButton" class="btn btn-info d-none">Generate Excel</button>
        <button id="submitDataButton" class="btn btn-success d-none" onclick="submitData()">Submit Data</button>
        <button id="btnDownloadPDF" class="btn btn-success d-none">Download Routing Sheets</button>


        @await Html.PartialAsync("_EditModal")

        <!-- Modal for displaying validation errors -->
        <div class="modal fade" id="errorModal" tabindex="-1" role="dialog" aria-labelledby="errorModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="errorModalLabel">Validation Errors</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Report</th>
                                    <th>Row No</th>
                                    <th>Column</th>
                                    <th>Result</th>
                                </tr>
                            </thead>
                            <tbody id="errorTableBody">
                                <!-- Error rows will be populated here -->
                            </tbody>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <script>
            window.isCheckInOutPage = false;

            
    $(window).on('resize', function () {
    $('#previewTable').DataTable().columns.adjust().draw();
});

            document.getElementById('clearPreview').addEventListener('click', clearPreview);

            function clearPreview() {
                if ($.fn.DataTable.isDataTable('#previewTable')) {
                    $('#previewTable').DataTable().clear().destroy(); // Clear data and destroy the instance
                }

                const tableHead = document.querySelector('#previewTable thead');
                const tableBody = document.querySelector('#previewTable tbody');

                tableHead.innerHTML = '';
                tableBody.innerHTML = '';

                document.getElementById('taskforceInfoContainer').innerHTML = '';
                document.getElementById('fileValidationErrorContainer').innerHTML = '';
                document.getElementById('generateExcelButton').classList.add('d-none');
                document.getElementById('submitDataButton').classList.add('d-none');
                document.getElementById('addRowButton').classList.add('d-none');
                smIdCounter = 0;
                uploadCounter = 0;
            }


            document.getElementById('generateExcelButton').addEventListener('click', function () {
                const originalTable = document.getElementById('previewTable');
                if (!originalTable) {
                    console.error('Table element not found.');
                    return;
                }

                const aoa = [];

                // Extract rows from table manually
                for (let rowIndex = 0; rowIndex < originalTable.rows.length; rowIndex++) {
                    const row = originalTable.rows[rowIndex];
                    const rowData = [];

                    for (let i = 0; i < row.cells.length - 1; i++) { // skip last column
                        let cellText = row.cells[i].innerText || row.cells[i].textContent;
                        if (i === getBarcodeColumnIndex(originalTable)) {
                            // Force barcode cell as exact string
                            cellText = cellText.trim();
                        }
                        rowData.push(cellText);
                    }

                    // Add new column
                    if (rowIndex === 0) {
                        rowData.push("Walk-In Service Member"); // Header row
                    } else {
                        rowData.push("No"); // Data rows
                    }

                    aoa.push(rowData);
                }

                const worksheet = XLSX.utils.aoa_to_sheet(aoa);

                // Optional: force all barcode cells as string
                const barcodeCol = getBarcodeColumnIndex(originalTable);
                if (barcodeCol >= 0) {
                    for (let r = 1; r < aoa.length; r++) { // skip header
                        const cellRef = XLSX.utils.encode_cell({ c: barcodeCol, r });
                        const cell = worksheet[cellRef];
                        if (cell) {
                            cell.t = 's';
                        }
                    }
                }

                const workbook = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(workbook, worksheet, 'PreviewData');
                XLSX.writeFile(workbook, 'PreviewData.xlsx');
            });

            // Helper to find the barcode column index based on header
            function getBarcodeColumnIndex(table) {
                const headerCells = table.rows[0]?.cells || [];
                for (let i = 0; i < headerCells.length; i++) {
                    const text = headerCells[i].innerText.trim();
                    if (text.toLowerCase() === 'barcode') {
                        return i;
                    }
                }
                return -1;
            }


            document.getElementById('uploadButton').addEventListener('click', function () {
                const calendarInput = document.getElementById('calendarInput').value;
                const lastCalendarInput = document.getElementById('lastCalendarInput').value;
                const eventId = document.getElementById('eventId').value;

                if (!eventId) {
                    alert('Please enter an Event ID.');
                    return;
                }

                if (!calendarInput) {
                    alert('Please select an Event Start Date.');
                    return;
                }

                if (!lastCalendarInput) {
                    alert('Please select an Event Last Date.');
                    return;
                }

                const startDate = new Date(calendarInput);
                const lastDate = new Date(lastCalendarInput);

                if (lastDate < startDate) {
                    alert('Event Last Date must be greater than Event Start Date.');
                    return;
                }

                document.getElementById('fileInput').click();
            });

            let isPreviewDoneSuccessfully = false;

            document.getElementById('fileInput').addEventListener('change', function () {
                const form = document.getElementById('fileUploadForm');
                const formData = new FormData(form);
                formData.append('eventDate', document.getElementById('calendarInput').value);
                formData.append('lastEventDate', document.getElementById('lastCalendarInput').value);
                formData.append('eventId', document.getElementById('eventId').value);
                formData.append('lastDentalExam', document.getElementById('dropdownLastDentalExam').value);
                formData.append('vision', document.getElementById('dropdownVision').value);
                formData.append('dental', document.getElementById('dropdownDental').value);
                formData.append('pha', document.getElementById('dropdownPHA').value);
                formData.append('hiv', document.getElementById('dropdownHIV').value);
                formData.append('hearing', document.getElementById('dropdownHearing').value);

                document.getElementById('loader').classList.remove('d-none');
                fetch('@Url.Action("UploadAndPreview", "Home")', {
                    method: 'POST',
                    body: formData
                })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(errorData => {
                                throw new Error(errorData.message || "An unknown error occurred.");
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        const validationErrors = data[0];
                        const mergedData = data[1];

                        if (mergedData) {
                            displayPreview(mergedData);
                        }

                        if (validationErrors && validationErrors.length > 0) {
                            if (isPreviewDoneSuccessfully) {
                                displayUploadFileValidationErrors(validationErrors, taskForceValueForErrorLog);
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error uploading files:', error);
                        alert(error.message || 'An error occurred while uploading files.');
                    })
                    .finally(() => {
                        document.getElementById('loader').classList.add('d-none');
                        document.getElementById('fileInput').value = '';
                    });
            });



            function displayUploadFileValidationErrors(errors, taskForceValue) {
                const errorContainer = document.getElementById('fileValidationErrorContainer');

                const section = document.createElement('div');
                section.style.marginBottom = '20px'; // Add space between each upload's errors

                const taskForceHeader = document.createElement('div');

                // Create a span for "Error Log:"
                const errorLogText = document.createElement('span');
                errorLogText.textContent = "Error Log: ";
                errorLogText.style.fontWeight = 'bold';
                errorLogText.style.color = 'red'; // Set "Error Log:" text color to red

                // Create a span for the task force value
                const taskForceValueText = document.createElement('span');
                taskForceValueText.textContent = taskForceValue; // Add the task force value
                taskForceValueText.style.fontWeight = 'bold'; // Optional: style for task force value

                // Append both spans to the header
                taskForceHeader.appendChild(errorLogText);
                taskForceHeader.appendChild(taskForceValueText);
                section.appendChild(taskForceHeader);

                const table = document.createElement('table');
                table.style.width = 'auto'; // Set width to auto for left alignment
                const headerRow = document.createElement('tr');
                headerRow.innerHTML = `
                                        <th style="text-align:left; padding-right: 200px;">Report</th>
                                        <th style="text-align:left; padding-right: 40px;">Row No</th>
                                        <th style="text-align:left; padding-right: 40px;">Column</th>
                                        <th style="text-align:left;">Error</th>
                                    `;
                table.appendChild(headerRow);

                const hr = document.createElement('hr');
                hr.style.border = '1px solid gray'; // Style the line
                hr.style.margin = '5px 0'; // Add some margin to the line
                hr.style.width = '200%'; // Make the line full width
                table.appendChild(hr);

                errors.forEach(error => {
                    const errorRow = document.createElement('tr');
                    errorRow.innerHTML = `
                                            <td>${error.FileName}</td>
                                            <td>${error.Row}</td>
                                            <td>${error.Column}</td>
                                            <td>${error.Error}</td>
                                        `;
                    table.appendChild(errorRow);
                });

                section.appendChild(table);
                errorContainer.appendChild(section);

                errorContainer.classList.remove('d-none'); // Show error container
            }




            let smIdCounter = 0;
            let uploadCounter = 0;
            let taskForceValueForErrorLog = '';

            const colors = [ // Define a color palette
                '#E3F2FD', // Light orange
                '#FFF9C4', // Light green
                '#E8F5E9', // Light blue
                '#FCE4EC', // Light pink
                '#F3E5F5', // Light yellow
                '#FFEBEE ', // Light yellow
            ];

            function displayPreview(data) {
                isPreviewDoneSuccessfully = false;
                uploadCounter++; // Increment the upload counter for each upload session

                let previewTable = document.querySelector('#previewTable');
                previewTable.classList.add('previewTable'); // Apply table styling from CSS

                let firstTaskforceValue = data[0].TaskForce;
                taskForceValueForErrorLog = firstTaskforceValue;
                let existingTaskforces = new Set();
                let taskforceColumnIndex = $('#previewTable thead th').filter(function () {
                    return $(this).text() === "TaskForce";
                }).index() + 1; // +1 because nth-child is 1-based

                $('#previewTable tbody tr').each(function () {
                    let taskforceValue = $(this).find(`td:nth-child(${taskforceColumnIndex})`).text();
                    existingTaskforces.add(taskforceValue);
                });

                if (existingTaskforces.has(firstTaskforceValue)) {
                    alert(`TaskForce "${firstTaskforceValue}" already exists in the table. No data will be inserted.`);
                    return;
                }

                let missingFullNameRows = [];

                // Handling DOD ID duplicates
                let dodIdCounts = {};
                let filteredData = data.filter((row, index) => {
                    let dodId = row['DOD ID'];
                    if (!dodIdCounts[dodId]) {
                        dodIdCounts[dodId] = 1;
                        return true;
                    } else {
                        dodIdCounts[dodId]++;
                        return false; // Skip the duplicate row
                    }
                });

                // Update totalRows to reflect unique entries only
                let totalRows = filteredData.length; // Now counting only the unique rows
                let taskforceInfoContainer = document.getElementById('taskforceInfoContainer');
                let tableHtml = `
                                                <table>
                                                    <thead>
                                                        <tr>
                                                            <th>Taskforce Name(s)</th>
                                                            <th>SM Count</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="taskforceBody"></tbody>
                                                </table>
                                            `;

                if (!document.getElementById('taskforceBody')) {
                    taskforceInfoContainer.innerHTML = tableHtml;
                }

                let taskforceBody = document.getElementById('taskforceBody');
                let newRow = document.createElement('tr');
                newRow.innerHTML = `
                                                <td>${firstTaskforceValue}</td>
                                                <td>${totalRows}</td>
                                            `;
                taskforceBody.appendChild(newRow);

                let formattedData = filteredData.map((row, index) => {
                    let rowData = Object.values(row);
                    smIdCounter++;
                    let smIdData = [smIdCounter];
                    let fullRowData = smIdData.concat(rowData);
                    fullRowData.push("No", "No", "", "", "", "");

                    let barcodeIndex = Object.keys(row).indexOf("Barcode") + 1; // +1 because SM ID is added at index 0
                    if (barcodeIndex > 0) {
                        let originalBarcode = fullRowData[barcodeIndex]; // Get original barcode value
                        let smIdPadded = smIdCounter.toString().padStart(5, '0'); // Pad SM ID to 5 digits
                        fullRowData[barcodeIndex] = `${originalBarcode}-${smIdPadded}`; // Append formatted SM ID
                    }

                    // let actionButtons = `
                    //                         <button class="btn mr-2" onclick="editRow(this)">Edit</button>
                    //                         <button class="btn mr-2 btn-print">Print</button>
                    //                         <button class="btn btn-danger d-none" onclick="cancelRow(this)">Cancel</button>
                    //                     `;
                    // fullRowData.push(actionButtons);

                    let fullNameIndex = Object.keys(row).indexOf("FULL NAME");
                    if (row["FULL NAME"] === "" || row["FULL NAME"] === null) {
                        let globalRowIndex = $('#previewTable tbody tr').length + index + 1;
                        missingFullNameRows.push(globalRowIndex);
                        fullRowData[fullNameIndex + 1] = '';
                    }

                    return fullRowData;
                });

                let tableHead = document.querySelector('#previewTable thead');
                let fullNameColumnIndex = -1;

                if (tableHead.innerHTML === '') {
                    let headers = Object.keys(filteredData[0]);
                    fullNameColumnIndex = headers.indexOf("FULL NAME") + 1;
                    headers.unshift('SM ID');
                    headers.push('Checked In', 'Checked Out', 'Checked In By', 'Checked Out By', 'Checked In Time', 'Checked Out Time');
                    headers.push('Actions');
                    let headerRowHtml = headers.map(header => `<th>${header}</th>`).join('');
                    tableHead.innerHTML = `<tr>${headerRowHtml}</tr>`;
                }

                if ($.fn.DataTable.isDataTable('#previewTable')) {
                    $('#previewTable').DataTable().rows.add(formattedData).draw(false);
                } else {
                    $('#previewTable').DataTable({
                        data: formattedData,
                        columns: [{ title: 'SM ID' }].concat(
                            Object.keys(filteredData[0]).map(header => ({ title: header }))
                        ).concat([
                            { title: 'Checked In' },
                            { title: 'Checked Out' },
                            { title: 'Checked In By' },
                            { title: 'Checked Out By' },
                            { title: 'Checked In Time' },
                            { title: 'Checked Out Time' },
                            { title: 'Actions', data: null,
                            orderable: false,
                            render: function () {
                                return `
                        <button class="btn btn-primary mr-2" onclick="editRow(this)">Edit</button>
                            <button class="btn mr-2 btn-print">Print</button>
                    `;
                            }}
                        ]),
                        scrollY: 400,
                        scrollX: true,
                        scrollCollapse: true,
                        paging: false,
                        autoWidth: false,
                        fixedColumns: {
                            leftColumns: 6
                        },
                        ordering: false,
                        order: [],
                        createdRow: function (row, data, dataIndex) {
                            let backgroundColor = colors[(uploadCounter - 1) % colors.length];
                            $(row).find('td').addClass('previewRow').css('background-color', backgroundColor); // Apply background color class
                            if (missingFullNameRows.includes(dataIndex + 1)) {
                                $(row).addClass('missingFullName'); // Apply red border for missing full name
                            }
                        }
                    });
                }

                //Show alerts for missing FULL NAME
                if (missingFullNameRows.length > 0) {
                    let alertMessage = missingFullNameRows.map(rowNum => `FULL NAME is missing in ${rowNum}th row.`).join('\n');
                    alert(alertMessage);
                }

                highlightMissingFullNameRows(missingFullNameRows);
                document.getElementById('generateExcelButton').classList.remove('d-none');
                document.getElementById('submitDataButton').classList.remove('d-none');
                document.getElementById('btnDownloadPDF').classList.remove('d-none');
                document.getElementById('addRowButton').classList.remove('d-none');
                isPreviewDoneSuccessfully = true;
            }

            function highlightMissingFullNameRows(missingRows) {
                $('#previewTable tbody tr').each(function (index) {
                    let rowIndex = index + 1; // Convert to 1-based index
                    if (missingRows.includes(rowIndex)) {
                        $(this).css('border', '2px solid red'); // Highlight the border of the row
                    }
                });
            }


            // function generateNewRowHtml(rowData) {
            //     let newRowHtml = '<tr>'; // Start a new row

            //     keys.forEach((key, index) => {
            //         const value = rowData[key] || ''; // Get the value for each key
            //         newRowHtml += `<td>${value}</td>`; // Add a new cell to the row with the value
            //     });

            //     newRowHtml += `
            //         <td>
            //             <button type="button" class="btn btn-primary" onclick="editRow(this)">Edit</button>
            //         </td>
            //     `; // Add an edit button at the end of the row

            //     newRowHtml += '</tr>'; // Close the row

            //     return newRowHtml;
            // }















            function submitData() {
                $('#loader').removeClass('d-none');
                // Get all data from the DataTable
                let tableRows = [];
                $('#previewTable tbody tr').each(function () {
                    let row = {
                        SmId: parseInt($(this).find('td:eq(0)').text()),
                        FullName: $(this).find('td:eq(1)').text(),
                        Name: $(this).find('td:eq(2)').text(),
                        FullSsn: $(this).find('td:eq(3)').text(),
                        Last4: $(this).find('td:eq(4)').text(),
                        DodId: $(this).find('td:eq(5)').text(),
                        Rank: $(this).find('td:eq(6)').text(),
                        Age: parseInt($(this).find('td:eq(7)').text()),
                        Sex: $(this).find('td:eq(8)').text(),
                        Mos: $(this).find('td:eq(9)').text(),
                        Agr: $(this).find('td:eq(10)').text(),
                        Uic: $(this).find('td:eq(11)').text(),
                        Mrc: $(this).find('td:eq(12)').text(),
                        Dob: $(this).find('td:eq(13)').text(),
                        Over40: $(this).find('td:eq(14)').text(),
                        DentalDue: $(this).find('td:eq(15)').text(),
                        DentalExam: $(this).find('td:eq(16)').text(),
                        DentalNeeded: $(this).find('td:eq(17)').text(),
                        PanoNeeded: $(this).find('td:eq(18)').text(),
                        BwxNeeded: $(this).find('td:eq(19)').text(),
                        Drc: $(this).find('td:eq(20)').text(),
                        PhaDate: $(this).find('td:eq(21)').text(),
                        PhaDue: $(this).find('td:eq(22)').text(),
                        Pha: $(this).find('td:eq(23)').text(),
                        Pulhes: $(this).find('td:eq(24)').text(),
                        VisionDate: $(this).find('td:eq(25)').text(),
                        Vision: $(this).find('td:eq(26)').text(),
                        NearVision: $(this).find('td:eq(27)').text(),
                        Vrc: $(this).find('td:eq(28)').text(),
                        Vision2pg: $(this).find('td:eq(29)').text(),
                        Vision1mi: $(this).find('td:eq(30)').text(),
                        HearingDate: $(this).find('td:eq(31)').text(),
                        Hearing: $(this).find('td:eq(32)').text(),
                        Hrc: $(this).find('td:eq(33)').text(),
                        HearingProfile: $(this).find('td:eq(34)').text(),
                        Quest: $(this).find('td:eq(35)').text(),
                        LabNeeded: $(this).find('td:eq(36)').text(),
                        Abo: $(this).find('td:eq(37)').text(),
                        AboNeeded: $(this).find('td:eq(38)').text(),
                        Dna: $(this).find('td:eq(39)').text(),
                        SickleDate: $(this).find('td:eq(40)').text(),
                        Sickle: $(this).find('td:eq(41)').text(),
                        G6pd: $(this).find('td:eq(42)').text(),
                        G6pdDate: $(this).find('td:eq(43)').text(),
                        G6pdStatus: $(this).find('td:eq(44)').text(),
                        HivNextTestDate: $(this).find('td:eq(45)').text(),
                        Hiv: $(this).find('td:eq(46)').text(),
                        LipidNeeded: $(this).find('td:eq(47)').text(),
                        LipidPanel: $(this).find('td:eq(48)').text(),
                        CholesterolHdlCholesterol: $(this).find('td:eq(49)').text(),
                        Framingham: $(this).find('td:eq(50)').text(),
                        Ekg: $(this).find('td:eq(51)').text(),
                        EkgNeeded: $(this).find('td:eq(52)').text(),
                        Hcg: $(this).find('td:eq(53)').text(),
                        Imm: $(this).find('td:eq(54)').text(),
                        HepB: $(this).find('td:eq(55)').text(),
                        HepA: $(this).find('td:eq(56)').text(),
                        Flu: $(this).find('td:eq(57)').text(),
                        TetTdp: $(this).find('td:eq(58)').text(),
                        Mmr: $(this).find('td:eq(59)').text(),
                        Varicella: $(this).find('td:eq(60)').text(),
                        TaskForce: $(this).find('td:eq(61)').text(),
                        Notes: $(this).find('td:eq(62)').text(),
                        Over44: $(this).find('td:eq(63)').text(),
                        EventDate: $(this).find('td:eq(64)').text(),
                        EventEndDate: $(this).find('td:eq(65)').text(),
                        EventId: $(this).find('td:eq(66)').text(),
                        VisionWin: parseInt($(this).find('td:eq(67)').text()),    // Convert to integer
                        DentalWin: parseInt($(this).find('td:eq(68)').text()),    // Convert to integer
                        PhaWin: parseInt($(this).find('td:eq(69)').text()),        // Convert to integer
                        HivWin: parseInt($(this).find('td:eq(70)').text()),        // Convert to integer
                        HearingWin: parseInt($(this).find('td:eq(71)').text()),
                        Barcode: $(this).find('td:eq(72)').text(),
                        isDeleted: false
                    };

                    tableRows.push(row);
                });

                const eventId = document.getElementById('eventId').value;
                // First, check if data exists for the given eventId
                $.ajax({
                    url: '@Url.Action("CheckForExistingDataAgainstEventId", "Home")',
                    type: 'POST',
                    data: JSON.stringify(eventId),
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    success: function (response) {
                        if (response.success) {
                            submitDataToDatabase(tableRows, eventId);
                        } else {
                            Swal.fire({
                                title: 'Data Exists!',
                                text: 'Data already exists for this Event ID. Do you want to overwrite it?',
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonText: 'Yes, overwrite',
                                cancelButtonText: 'No, cancel'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    submitDataToDatabase(tableRows, eventId);
                                } else {
                                    Swal.fire('Cancelled', 'No changes were made.', 'info');
                                }
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        alert("Error: " + error);
                    },
                    complete: function () {
                        $('#loader').addClass('d-none');
                    }
                });
            }

            function submitDataToDatabase(tableRows, eventId) {
                const dataToSend = JSON.stringify({
                    Entities: tableRows,
                    EventId: eventId
                });
                console.log(dataToSend);
                $.ajax({
                    url: '@Url.Action("SubmitDataInDatabase", "Home")',
                    type: 'POST',
                    data: dataToSend,
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    success: function (response) {
                        Swal.fire({
                            title: response.success ? "Success!" : "Error!",
                            text: response.message,
                            icon: response.success ? "success" : "error",
                            confirmButtonText: "OK"
                        }).then(() => {
                            if (response.success) {
                                clearPreview();
                            }
                        });
                    },
                    error: function (xhr, status, error) {
                        Swal.fire({
                            title: "Error!",
                            text: "Something went wrong: " + error,
                            icon: "error",
                            confirmButtonText: "OK"
                        });
                    },
                    complete: function () {
                        $('#loader').addClass('d-none');
                    }
                });
            }

            function getMergedData() {
                let tableBody = document.querySelector('#previewTable tbody');
                let rows = tableBody.querySelectorAll('tr');
                let data = [];
                rows.forEach(row => {
                    let cells = row.querySelectorAll('td');
                    let rowData = {};
                    cells.forEach((cell, index) => {
                        rowData[`Column${index + 1}`] = cell.textContent;
                    });
                    data.push(rowData);
                });
                return data;
            }





        </script>
    </div>
    <style>
        .btn-warning {
            background-color: #ffc107;
            border-color: #ffc107;
        }

        .btn-success {
            background-color: #28a745;
            border-color: #28a745;
        }

        .button-container {
            display: flex;
            justify-content: center;
            gap: 15px;
        }



        body {
            background-color: rgba(80,90,201,0.1);
        }

        .form-control, .btn {
            background-color: rgba(80,90,201,1); /* Theme color */
            border-color: rgba(80,90,201,1);
            color: white;
        }

        select.form-control, .event-input {
            background-color: #fff;
            border-color: #ced4da;
            color: black;
        }

        .custom-select {
            padding: 0.5em;
            border: 1px solid #ccc;
            border-radius: 4px;
            appearance: none; /* Remove default arrow */
            background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><polygon points="0,4 8,12 16,4" style="fill:%23666;" /></svg>') no-repeat right 0.5em center; /* Custom arrow */
            background-size: 1em;
            width: 150px;
        }

        .custom-datetime {
            padding: 0.5em;
            border: 1px solid #ccc;
            border-radius: 4px;
            background-color: #fff;
        }









        #parentContainer {
            display: flex;
            flex-direction: column; /* Stacks children vertically */
        }

        #taskforceInfoContainer,
        #fileValidationErrorContainer {
            width: 100%; /* Makes sure both containers take the full width */
            clear: both; /* Clears any floated elements */
        }

    </style>

    <script src="~/js/ScrubSheet.js"></script>
