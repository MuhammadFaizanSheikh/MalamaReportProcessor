@{
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

<!-- Required Libraries -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.5/css/jquery.dataTables.min.css">
<script src="https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js"></script>
<link rel="stylesheet" href="https://cdn.datatables.net/fixedcolumns/4.2.2/css/fixedColumns.dataTables.min.css">
<script src="https://cdn.datatables.net/fixedcolumns/4.2.2/js/dataTables.fixedColumns.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.0/dist/JsBarcode.all.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet" href="~/css/site.css" />

<div class="container-fluid" style="max-width: 100%; padding-top: 0; margin-top: 0;">
    <!-- Header -->
    <!-- Heading -->
    <div class="row mt-4">
        <div class="col-md-12 text-center">
            <h1 style="color: rgba(80,90,201,1);">Malama</h1>
        </div>
    </div>

    <!-- File Input Section -->
    <div class="d-flex justify-content-center mt-4">
        <div class="form-group w-75">
            <div class="row justify-content-center align-items-center">
                @* <label for="excelFile" class="col-auto col-form-label">Select Excel File:</label> *@
                <div class="col-auto">
                    <input type="file" id="excelFile" class="form-control-file" accept=".xlsx,.xls" />
                </div>
                @* <div class="col-auto">
                <input type="text" id="filePathDisplay" class="form-control eve000000000121 48yu44u u N u40 k+nt-input" placeholder="No file selected" readonly />
                </div> *@
            </div>
        </div>
    </div>

    <table id="eventSummaryTable" class="display nowrap table table-bordered" style="display: none;">
        <thead>
            <tr bgcolor="#7b83eb">
                <th style="color: white">Event Summary</th>
                <th style="color: white">Count</th>
            </tr>
        </thead>
        <tbody>
            <tr bgcolor="ffffff">
                <td>Total number of SM</td>
                <td id="totalSmColumn">0</td>
            </tr>
            <tr>
                <td>Number of SM Checked In</td>
                <td id="checkedInColumn">0</td>
            </tr>
            <tr bgcolor="ffffff">
                <td>Number of SM Checked Out</td>
                <td id="checkedOutColumn">0</td>
            </tr>
            <tr>
                <td>Number of SM Walked In</td>
                <td id="walkedInColumn">0</td>
            </tr>
        </tbody>
    </table>



    <!-- Loader -->
    <div id="loader" class="d-none loader-container">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>

    <div class="card p-3 mb-4" style="display:none">
        <div class="container">
            <div class="row g-2">
                <!-- First Row -->
                <div class="col-md-3">
                    <label for="filterFullName" class="form-label">Full Name</label>
                    <input type="text" id="filterFullName" class="form-control" placeholder="Full Name" oninput="validateFullName(this)">

                </div>
                <div class="col-md-3">
                    <label for="filterDodId" class="form-label">DoD ID</label>
                    <input type="text" id="filterDodId" class="form-control" placeholder="DoD ID" maxlength="10" oninput="allowOnlyDigits(this)">

                </div>
                <div class="col-md-3">
                    <label for="filterLast4Ssn" class="form-label">Last 4 SSN</label>
                    <input type="text" id="filterLast4Ssn" class="form-control" placeholder="Last 4 SSN" maxlength="4" oninput="allowOnlyDigits(this)">
                </div>
                <div class="col-md-3">
                    <label for="filterDob" class="form-label">DOB</label>
                    <input type="date" id="filterDob" class="form-control" placeholder="Date of Birth">
                </div>
                <div class="col-md-3">
                    <label for="filterCheckIn" class="form-label">Check-In</label>
                    <select id="filterCheckIn" class="form-control">
                        <option value="">Select CheckIn</option>
                        <option value="Yes">Yes</option>
                        <option value="No">No</option>
                        <option value="All">All</option>
                    </select>
                </div>

                <div class="col-md-3">
                    <label for="filterCheckOut" class="form-label">Check-Out</label>
                    <select id="filterCheckOut" class="form-control">
                        <option value="">Select CheckOut</option>
                        <option value="Yes">Yes</option>
                        <option value="No">No</option>
                        <option value="All">All</option>
                    </select>
                </div>

                <div class="col-md-3">
                    <label for="filterWalkInSm" class="form-label">Walk-In SM</label>
                    <select id="filterWalkInSm" class="form-control">
                        <option value="">Select Walk-In SM</option>
                        <option value="Yes">Yes</option>
                        <option value="No">No</option>
                        <option value="All">All</option>
                    </select>
                </div>

                <div class="col-md-3">
                    <label for="filterSex" class="form-label">Sex</label>
                    <select id="filterSex" class="form-control">
                        <option value="">Select Sex</option>
                        <option value="M">M</option>
                        <option value="F">F</option>
                        <option value="All">All</option>
                    </select>
                </div>

                <!-- Search Button (Centered) -->
                <div class="col-12 text-center mt-3">
                    <button id="searchStaffBtn" type="button" class="btn btn-primary px-4">Search</button>
                    <button id="resetFiltersBtn" type="button" class="btn btn-secondary px-4 ms-2">Reset Filters</button>
                </div>
            </div>
        </div>
    </div>



    <!-- Preview Table -->
    @await Html.PartialAsync("_PreviewTable")


    <!-- Buttons -->
    <div class="d-flex justify-content-center my-3 button-container">
        <button id="addRowButton" class="btn btn-secondary d-none">Add Walk-In Service Member</button>
        <button id="generateExcelButton" class="btn btn-info d-none">Generate Excel</button>
        @* <button id="submitDataButton" class="btn btn-success" onclick="submitData()">Submit Data</button> *@
        <button id="btnDownloadPDF" class="btn btn-success d-none">Download Routing Sheets</button>
    </div>

    <!-- Edit Modal -->
    @await Html.PartialAsync("_EditModal")

    <!-- Error Modal -->
    <div class="modal fade" id="errorModal" tabindex="-1" role="dialog" aria-labelledby="errorModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Validation Errors</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Report</th>
                                <th>Row No</th>
                                <th>Column</th>
                                <th>Result</th>
                            </tr>
                        </thead>
                        <tbody id="errorTableBody"></tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Excel Preview Script -->
<script>
    window.isCheckInOutPage = true;

    let smIdCounter = null;
    let walkInServiceMemberCount = 0;

    $(window).on('resize', function () {
    $('#previewTable').DataTable().columns.adjust().draw();
    });

function validateFullName(input) {
        // Allow letters (a-z, A-Z), space, dot, apostrophe, hyphen
        input.value = input.value.replace(/[^a-zA-Z\s.\-']/g, '');
    }

    function allowOnlyDigits(input) {
        // Allow only digits
        input.value = input.value.replace(/\D/g, '');
    }

    $("#excelFile").on("change", function (e) {
        const file = e.target.files[0];
        if (!file) return;

        // $("#filePathDisplay").val(file.name);
        $("#loader").removeClass("d-none"); // Show loader

        const reader = new FileReader();
        reader.onload = function (e) {
            try {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, { type: "array" });
                const firstSheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[firstSheetName];
                const json = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

                if (json.length === 0 || !json[0]) return;

                const originalHeaders = json[0];
                const validIndexes = originalHeaders
                    .map((header, index) => ({ header, index }))
                    .filter(col =>
                        col.header &&
                        col.header.toString().trim() !== ""
                        // &&
                        // col.header.toString().trim().toLowerCase() !== "walk-in service member"
                    );


                if (validIndexes.length === 0) return;

                if ($.fn.DataTable.isDataTable("#previewTable")) {
                    $("#previewTable").DataTable().clear().destroy();
                }

                $("#previewTable thead").empty();
                $("#previewTable tbody").empty();

                let headerRow = "<tr>";
                validIndexes.forEach(col => headerRow += `<th>${col.header}</th>`);
                headerRow += `<th>Actions</th>`;
                headerRow += "</tr>";
                $("#previewTable thead").append(headerRow);

                $("#previewTable thead th").css({
                    "background-color": "rgba(120, 130, 221, 1)",
                    "color": "white" // optional: for better contrast
                });


                let formattedData = [];
                for (let i = 1; i < json.length; i++) {
                    let rowData = [];
                    validIndexes.forEach(col => {
                        const cellData = json[i][col.index] ?? "";
                        rowData.push($('<div>').text(cellData).html());
                    });
                    // Add an empty placeholder for the action column
                    rowData.push(null); // This is for the "Actions" column
                    formattedData.push(rowData);

                    const walkInCol = validIndexes.find(col => col.header.trim().toLowerCase() === "walk-in service member");
                    if (walkInCol) {
                        const walkInValue = (json[i][walkInCol.index] ?? "").toString().trim().toLowerCase();
                        if (walkInValue === "yes") {
                            walkInServiceMemberCount++;
                        }
                    }
                }

                const lastRow = json[json.length - 1];
                smIdCounter = lastRow[0] ?? null;

                const colors = ["#f9f9f9", "#eef9f9", "#f0f9ff", "#fff0f0"]; // or your actual color array
                const uploadCounter = 1; // you can manage this as per your logic
                const missingFullNameRows = []; // update this based on validation if needed

                $("#previewTable").DataTable({
                    data: formattedData,
                    columns: [
                        // ...validIndexes.map(col => ({
                        //     title: col.header,
                        //     visible: col.header.trim().toLowerCase() !== "walk-in service member" // hide this column
                        // })),
                        ...validIndexes.map(col => ({ title: col.header })),
                        {
                            title: "Actions",
                            data: null,
                            orderable: false,
                            render: function () {
                                return `
                        <button class="btn btn-primary mr-2" onclick="editRow(this)">Edit</button>
                            <button class="btn mr-2 btn-print">Print</button>
                    `;
                            }
                        }
                    ],

                    scrollY: 400,
                    scrollX: true,
                    scrollCollapse: true,
                    paging: false,
                    autoWidth: false,
                    fixedColumns: {
                        leftColumns: 6
                    },
                    ordering: false,
                    order: [],
                    createdRow: function (row, data, dataIndex) {
                        let backgroundColor = colors[(uploadCounter - 1) % colors.length];
                        $(row).find('td').css('background-color', backgroundColor);
                        if (missingFullNameRows.includes(dataIndex + 1)) {
                            $(row).css('border', '2px solid red');
                        }
                    }


                });

                RenderUpdatedEventSummaryTable();
                document.getElementById('addRowButton').classList.remove('d-none');
                const filterDiv = document.querySelector('.card.p-3.mb-4');
                filterDiv.style.display = 'block';

            } catch (error) {
            } finally {
                $("#loader").addClass("d-none"); // Hide loader after processing
            }
        };

        reader.readAsArrayBuffer(file);
    });

    function RenderUpdatedEventSummaryTable() {
        var previewTable = $("#previewTable");
        var checkedInIndex = getColumnIndex(previewTable, "Checked In");
        var checkedOutIndex = getColumnIndex(previewTable, "Checked Out");

        // Ensure columns were found
        if (checkedInIndex === -1 || checkedOutIndex === -1) {
            console.error("Checked In or Checked Out columns not found!");
            return;
        }

        let totalSM = 0;
        let checkedInCount = 0;
        let checkedOutCount = 0;

        // Loop through table body rows (excluding the header)
        previewTable.find("tbody tr").each(function () {
            totalSM++;

            let cells = $(this).find("td");
            let checkedInText = cells.eq(checkedInIndex).text().trim().toLowerCase();
            let checkedOutText = cells.eq(checkedOutIndex).text().trim().toLowerCase();

            if (checkedInText === "yes") {
                checkedInCount++;
            }

            if (checkedOutText === "yes") {
                checkedOutCount++;
            }
        });

        // Update eventSummaryTable values
        $("#totalSmColumn").text(totalSM);
        $("#checkedInColumn").text(checkedInCount);
        $("#checkedOutColumn").text(checkedOutCount);
        $("#walkedInColumn").text(walkInServiceMemberCount);
        $("#eventSummaryTable").show();
    }

    function UpdateExcelFile() {
    const previewTable = $('#previewTable').DataTable();

    // Step 1: Clear all filters
    previewTable.search('');
    previewTable.columns().search('');
    resetAllFilters();
    // Step 2: Wait for redraw to complete before extracting data
    previewTable.one('draw', function () {
        const table = document.getElementById("previewTable");
        const data = [];

        // Extract headers (excluding the last one, assuming it's "Actions")
        const headers = [];
        const headerCells = table.querySelectorAll("thead tr th");
        headerCells.forEach((th, i) => {
            if (th.innerText.trim() !== "Actions") {
                headers.push(th.innerText.trim());
            }
        });

        // Extract actual data from table rows
        const bodyRows = table.querySelectorAll("tbody tr");
        bodyRows.forEach(row => {
            const rowData = {};
            const cells = row.querySelectorAll("td");

            headers.forEach((header, i) => {
                rowData[header] = cells[i]?.innerText.trim() ?? "";
            });

            data.push(rowData);
        });

        // Get filename from file input
        const fileInput = document.getElementById("excelFile");
        const filename = fileInput && fileInput.files.length > 0 ? fileInput.files[0].name : "";

        if (!filename) {
            Swal.fire("Error", "Filename not found. Please upload a file first.", "error");
            return;
        }

        // Send to server
        $.ajax({
            url: `/ExcelFileUploader/ExportToExcel?filename=${encodeURIComponent(filename)}`,
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(data),
            success: function (response) {
                Swal.fire("Success", response, "success");
            },
            error: function (xhr) {
                const error = xhr.responseText || "Failed to export data";
                Swal.fire("Error", error, "error");
            }
        });
    });

    // Trigger redraw to reset filters and invoke draw handler
    previewTable.draw();
}


    $('#searchStaffBtn').on('click', function () {
    var fullName = $('#filterFullName').val().trim().toLowerCase();
    var last4Ssn = $('#filterLast4Ssn').val().trim();
    var dodId = $('#filterDodId').val().trim();
    var dob = $('#filterDob').val();
    var sex = $('#filterSex').val();
    var checkIn = $('#filterCheckIn').val();
    var checkOut = $('#filterCheckOut').val();
    var walkInSm = $('#filterWalkInSm').val();
    var previewTable = $('#previewTable').DataTable();
    // Clear previous searches
    previewTable.columns().search('');

    if (fullName) {
    const escapedFullName = fullName.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // escape special characters
    const regex = '^' + escapedFullName + '$'; // match whole word
    previewTable.column(1).search(regex, true, false, true); // regex = true, smart = false, caseInsensitive = true
    }
    if (last4Ssn) {
        previewTable.column(keys.indexOf('LAST 4')).search('^' + last4Ssn + '$', true, false);
    }
    if (dodId) {
        previewTable.column(keys.indexOf('DOD ID')).search('^' + dodId + '$', true, false);
    }
    if (dob) {
        previewTable.column(keys.indexOf('DOB')).search(formatDateToMMDDYYYY(dob));
    }
    if (sex && sex !== 'All') {
        previewTable.column(keys.indexOf('SEX')).search('^' + sex + '$', true, false);
    }
    if (checkIn && checkIn !== 'All') {
        previewTable.column(keys.indexOf('Checked In')).search('^' + checkIn + '$', true, false);
    }
    if (checkOut && checkOut !== 'All') {
        previewTable.column(keys.indexOf('Checked Out')).search('^' + checkOut + '$', true, false);
    }
    if (walkInSm && walkInSm !== 'All') {
        previewTable.column(keys.indexOf('Walk-In Service Member')).search('^' + walkInSm + '$', true, false);
    }

    // Redraw the table
    previewTable.draw();
});

$('#resetFiltersBtn').click(function () {
    resetAllFilters();
});

function resetAllFilters() {
    // Clear all input and select fields
    $('#filterFullName').val('');
    $('#filterDodId').val('');
    $('#filterLast4Ssn').val('');
    $('#filterDob').val('');
    $('#filterCheckIn').val('');
    $('#filterCheckOut').val('');
    $('#filterWalkInSm').val('');
    $('#filterSex').val('');

    // Clear DataTable filters
    var previewTable = $('#previewTable').DataTable();
    previewTable.columns().search('');
    previewTable.search('').draw();
}



</script>

<!-- Styles -->
<style>

</style>
<script src="~/js/ScrubSheet.js"></script>