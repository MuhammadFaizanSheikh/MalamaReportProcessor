@{
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

<!-- Required Libraries -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.5/css/jquery.dataTables.min.css">
<script src="https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js"></script>
<link rel="stylesheet" href="https://cdn.datatables.net/fixedcolumns/4.2.2/css/fixedColumns.dataTables.min.css">
<script src="https://cdn.datatables.net/fixedcolumns/4.2.2/js/dataTables.fixedColumns.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.0/dist/JsBarcode.all.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet" href="~/css/site.css" />

<div class="container-fluid" style="max-width: 100%; padding-top: 0; margin-top: 0;">
    <!-- Header -->
    <!-- Heading -->
    <div class="row mt-4">
        <div class="col-md-12 text-center">
            <h1 style="color: rgba(80,90,201,1);">Malama</h1>
        </div>
    </div>

    <!-- File Input Section -->
    <div class="d-flex justify-content-center mt-4">
        <div class="form-group w-75">
            <div class="row justify-content-center align-items-center">
                @* <label for="excelFile" class="col-auto col-form-label">Select Excel File:</label> *@
                <div class="col-auto">
                    <input type="file" id="excelFile" class="form-control-file" accept=".xlsx,.xls" />
                </div>
                @* <div class="col-auto">
                <input type="text" id="filePathDisplay" class="form-control eve000000000121 48yu44u u N u40 k+nt-input" placeholder="No file selected" readonly />
                </div> *@
            </div>
        </div>
    </div>

    <table id="eventSummaryTable" class="display nowrap table table-bordered" style="display: none;">
        <thead>
            <tr>
                <th>Event Summary</th>
                <th>Count</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Total number of SM</td>
                <td id="totalSmColumn">0</td>
            </tr>
            <tr>
                <td>Number of SM Checked In</td>
                <td id="checkedInColumn">0</td>
            </tr>
            <tr>
                <td>Number of SM Checked Out</td>
                <td id="checkedOutColumn">0</td>
            </tr>
            <tr>
                <td>Number of SM Walked In</td>
                <td id="walkedInColumn">0</td>
            </tr>
        </tbody>
    </table>



    <!-- Loader -->
    <div id="loader" class="d-none loader-container">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>

    <!-- Preview Table -->
    @await Html.PartialAsync("_PreviewTable")


    <!-- Buttons -->
    <div class="d-flex justify-content-center my-3 button-container">
        <button id="addRowButton" class="btn btn-secondary d-none">Add Walk-In Service Member</button>
        <button id="generateExcelButton" class="btn btn-info d-none">Generate Excel</button>
        @* <button id="submitDataButton" class="btn btn-success" onclick="submitData()">Submit Data</button> *@
        <button id="btnDownloadPDF" class="btn btn-success d-none">Download Routing Sheets</button>
    </div>

    <!-- Edit Modal -->
    @await Html.PartialAsync("_EditModal")

    <!-- Error Modal -->
    <div class="modal fade" id="errorModal" tabindex="-1" role="dialog" aria-labelledby="errorModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Validation Errors</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Report</th>
                                <th>Row No</th>
                                <th>Column</th>
                                <th>Result</th>
                            </tr>
                        </thead>
                        <tbody id="errorTableBody"></tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Excel Preview Script -->
<script>
    window.isCheckInOutPage = true;

    let smIdCounter = null;
    let walkInServiceMemberCount = 0;

    $("#excelFile").on("change", function (e) {
        const file = e.target.files[0];
        if (!file) return;

        // $("#filePathDisplay").val(file.name);
        $("#loader").removeClass("d-none"); // Show loader

        const reader = new FileReader();
        reader.onload = function (e) {
            try {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, { type: "array" });
                const firstSheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[firstSheetName];
                const json = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

                if (json.length === 0 || !json[0]) return;

                const originalHeaders = json[0];
                const validIndexes = originalHeaders
                    .map((header, index) => ({ header, index }))
                    .filter(col =>
                        col.header &&
                        col.header.toString().trim() !== ""
                        // &&
                        // col.header.toString().trim().toLowerCase() !== "walk-in service member"
                    );


                if (validIndexes.length === 0) return;

                if ($.fn.DataTable.isDataTable("#previewTable")) {
                    $("#previewTable").DataTable().clear().destroy();
                }

                $("#previewTable thead").empty();
                $("#previewTable tbody").empty();

                let headerRow = "<tr>";
                validIndexes.forEach(col => headerRow += `<th>${col.header}</th>`);
                headerRow += `<th>Actions</th>`;
                headerRow += "</tr>";
                $("#previewTable thead").append(headerRow);

                let formattedData = [];
                for (let i = 1; i < json.length; i++) {
                    let rowData = [];
                    validIndexes.forEach(col => {
                        const cellData = json[i][col.index] ?? "";
                        rowData.push($('<div>').text(cellData).html());
                    });
                    // Add an empty placeholder for the action column
                    rowData.push(null); // This is for the "Actions" column
                    formattedData.push(rowData);

                    const walkInCol = validIndexes.find(col => col.header.trim().toLowerCase() === "walk-in service member");
                    if (walkInCol) {
                        const walkInValue = (json[i][walkInCol.index] ?? "").toString().trim().toLowerCase();
                        if (walkInValue === "yes") {
                            walkInServiceMemberCount++;
                        }
                    }
                }

                const lastRow = json[json.length - 1];
                smIdCounter = lastRow[0] ?? null;

                const colors = ["#f9f9f9", "#eef9f9", "#f0f9ff", "#fff0f0"]; // or your actual color array
                const uploadCounter = 1; // you can manage this as per your logic
                const missingFullNameRows = []; // update this based on validation if needed

                $("#previewTable").DataTable({
                    data: formattedData,
                    columns: [
                        // ...validIndexes.map(col => ({
                        //     title: col.header,
                        //     visible: col.header.trim().toLowerCase() !== "walk-in service member" // hide this column
                        // })),
                        ...validIndexes.map(col => ({ title: col.header })),
                        {
                            title: "Actions",
                            data: null,
                            orderable: false,
                            render: function () {
                                return `
                        <button class="btn btn-primary mr-2" onclick="editRow(this)">Edit</button>
                            <button class="btn mr-2 btn-print">Print</button>
                    `;
                            }
                        }
                    ],

                    scrollY: 400,
                    scrollX: true,
                    scrollCollapse: true,
                    paging: false,
                    autoWidth: false,
                    fixedColumns: {
                        leftColumns: 6
                    },
                    ordering: false,
                    order: [],
                    createdRow: function (row, data, dataIndex) {
                        let backgroundColor = colors[(uploadCounter - 1) % colors.length];
                        $(row).find('td').css('background-color', backgroundColor);
                        if (missingFullNameRows.includes(dataIndex + 1)) {
                            $(row).css('border', '2px solid red');
                        }
                    }


                });

                RenderUpdatedEventSummaryTable();
                document.getElementById('addRowButton').classList.remove('d-none');

            } catch (error) {
            } finally {
                $("#loader").addClass("d-none"); // Hide loader after processing
            }
        };

        reader.readAsArrayBuffer(file);
    });

    function RenderUpdatedEventSummaryTable() {
        var previewTable = $("#previewTable");
        var checkedInIndex = getColumnIndex(previewTable, "Checked In");
        var checkedOutIndex = getColumnIndex(previewTable, "Checked Out");

        // Ensure columns were found
        if (checkedInIndex === -1 || checkedOutIndex === -1) {
            console.error("Checked In or Checked Out columns not found!");
            return;
        }

        let totalSM = 0;
        let checkedInCount = 0;
        let checkedOutCount = 0;

        // Loop through table body rows (excluding the header)
        previewTable.find("tbody tr").each(function () {
            totalSM++;

            let cells = $(this).find("td");
            let checkedInText = cells.eq(checkedInIndex).text().trim().toLowerCase();
            let checkedOutText = cells.eq(checkedOutIndex).text().trim().toLowerCase();

            if (checkedInText === "yes") {
                checkedInCount++;
            }

            if (checkedOutText === "yes") {
                checkedOutCount++;
            }
        });

        // Update eventSummaryTable values
        $("#totalSmColumn").text(totalSM);
        $("#checkedInColumn").text(checkedInCount);
        $("#checkedOutColumn").text(checkedOutCount);
        $("#walkedInColumn").text(walkInServiceMemberCount);
        $("#eventSummaryTable").show();
    }

    function UpdateExcelFile() {
        const table = document.getElementById("previewTable");
        const data = [];

        // Extract headers (excluding the last one, assuming it's "Actions")
        const headers = [];
        const headerCells = table.querySelectorAll("thead tr th");
        headerCells.forEach((th, i) => {
            if (th.innerText.trim() !== "Actions") {
                headers.push(th.innerText.trim());
            }
        });

        debugger;
        // Extract actual data from table rows
        const bodyRows = table.querySelectorAll("tbody tr");
        bodyRows.forEach(row => {
            const rowData = {};
            const cells = row.querySelectorAll("td");

            headers.forEach((header, i) => {
                rowData[header] = cells[i]?.innerText.trim() ?? "";
            });

            data.push(rowData);
        });

        // Get filename from file input
        const fileInput = document.getElementById("excelFile");
        const filename = fileInput && fileInput.files.length > 0 ? fileInput.files[0].name : "";

        if (!filename) {
            Swal.fire("Error", "Filename not found. Please upload a file first.", "error");
            return;
        }

        // Send to server
        $.ajax({
            url: `/ExcelFileUploader/ExportToExcel?filename=${encodeURIComponent(filename)}`,
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(data),
            success: function (response) {
                Swal.fire("Success", response, "success");
            },
            error: function (xhr) {
                const error = xhr.responseText || "Failed to export data";
                Swal.fire("Error", error, "error");
            }
        });
    }

    // function UpdateExcelFile() {
    //     const table = $('#previewTable').DataTable();
    //     const data = [];

    //     // Get column headers including hidden ones, excluding "Actions"
    //     const headers = table.columns().header().toArray()
    //         .map(th => th.innerText.trim())
    //         .filter(header => header && header !== "Actions");

    //     // Loop through all rows including hidden columns
    //     // table.rows().every(function () {
    //     //     const rowData = this.data();
    //     //     const rowObject = {};

    //     //     headers.forEach((header, i) => {
    //     //         rowObject[header] = rowData[i];
    //     //     });

    //     //     data.push(rowObject);
    //     // });
    //     debugger;
    //     // table.rows().every(function () {
    //     //     const rowObject = {};
    //     //     const cells = this.nodes().to$().find('td'); // Get actual DOM cells
    //     //     headers.forEach((header, i) => {
    //     //         // Use text input/textarea value if present, otherwise fallback to innerText
    //     //         const input = $(cells[i]).find('input, textarea, select');
    //     //         if (input.length > 0) {
    //     //             //rowObject[header] = input.val()?.trim() ?? "";
    //     //         } else {
    //     //             rowObject[header] = $(cells[i]).text().trim();
    //     //         }
    //     //     });
    //     //     data.push(rowObject);
    //     // });

    //     table.rows().every(function () {
    //         const rowObject = {};
    //         const rowNode = this.node(); // DOM node for the row
    //         const cells = rowNode.querySelectorAll('td');

    //         headers.forEach((header, i) => {
    //             const cell = cells[i];
    //             let value = "";

    //             // Check for input/select/textarea
    //             const input = cell.querySelector('input, textarea, select');
    //             if (input) {
    //                 value = input.value.trim();
    //             } else {
    //                 // Ignore buttons inside the cell
    //                 const clonedCell = cell.cloneNode(true);
    //                 const buttons = clonedCell.querySelectorAll('button, a');
    //                 buttons.forEach(btn => btn.remove());
    //                 value = clonedCell.innerText.trim();
    //             }

    //             rowObject[header] = value;
    //         });

    //         data.push(rowObject);
    //     });



    //     // Get filename
    //     const fileInput = document.getElementById("excelFile");
    //     const filename = fileInput && fileInput.files.length > 0 ? fileInput.files[0].name : "";

    //     if (!filename) {
    //         Swal.fire("Error", "Filename not found. Please upload a file first.", "error");
    //         return;
    //     }
    //     // Send to server
    //     $.ajax({
    //         url: `/ExcelFileUploader/ExportToExcel?filename=${encodeURIComponent(filename)}`,
    //         type: 'POST',
    //         contentType: 'application/json',
    //         data: JSON.stringify(data),
    //         success: function (response) {
    //             Swal.fire("Success", response, "success");
    //         },
    //         error: function (xhr) {
    //             const error = xhr.responseText || "Failed to export data";
    //             Swal.fire("Error", error, "error");
    //         }
    //     });
    // }


</script>

<!-- Styles -->
<style>

</style>
<script src="~/js/ScrubSheet.js"></script>